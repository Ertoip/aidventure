{"ast":null,"code":"var _jsxFileName = \"/home/pietro/Desktop/aidventure/frontend/src/pages/Demo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport './Demo.scss';\nimport Particles from '../elements/Particles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Demo() {\n  _s();\n  const [messages, setMessages] = useState([]); // State to store the messages\n  const [inputValue, setInputValue] = useState(''); // State to track textarea input\n  const textareaRef = useRef(null); // Ref to access the textarea\n\n  // Function to handle form submission\n  const handleSubmit = async () => {\n    if (inputValue.trim() !== '') {\n      const userMessage = {\n        text: inputValue,\n        type: 'user'\n      };\n\n      // Append the user message to the bottom of the message list\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n\n      // Open the connection to stream the message\n      const response = await fetch('http://127.0.0.1:8000/send-message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: inputValue\n        })\n      });\n\n      // Stream the response text in real-time\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      // Process each chunk as it's received\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n\n        // Parse and handle each line of the streamed response\n        const messagesArray = chunk.trim().split(\"\\n\").filter(Boolean).map(JSON.parse);\n\n        // Append each streamed chunk of the response to the message list\n        messagesArray.forEach(messageChunk => {\n          const responseMessage = {\n            text: messageChunk.message,\n            type: 'response'\n          };\n          setMessages(prevMessages => [...prevMessages, responseMessage]);\n        });\n      }\n      setInputValue(''); // Clear textarea after submit\n    }\n  };\n\n  // Function to initialize the conversation by fetching the system's first message\n  const initChat = async () => {\n    const response = await fetch('http://127.0.0.1:8000/initChat', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    const welcomeMessage = {\n      text: data.message,\n      type: 'response'\n    };\n\n    // Set the initial welcome message\n    setMessages([welcomeMessage]);\n  };\n\n  // Utility function to convert newlines to <br /> tags\n  const renderMessageWithNewlines = message => {\n    return message.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this));\n  };\n\n  // Handle Enter (submit) and Shift+Enter (newline)\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      if (e.shiftKey) {\n        return;\n      } else {\n        e.preventDefault();\n        handleSubmit();\n      }\n    }\n  };\n\n  // Adjust the textarea height dynamically based on content\n  const handleInput = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto'; // Reset the height\n      textarea.style.height = `${Math.min(textarea.scrollHeight, 5 * 24)}px`; // Max height of 5 lines (assuming 24px line height)\n    }\n  };\n\n  // Send the initial storyteller message when component mounts\n  useEffect(() => {\n    initChat(); // Initialize the chat by calling the FastAPI `/initChat` route\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"topContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messageList\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.type === 'user' ? 'messageItemUser' : 'messageItemResponse',\n            children: renderMessageWithNewlines(message.text)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"chatForm\",\n          onSubmit: e => e.preventDefault(),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputWrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              ref: textareaRef,\n              className: \"chatInput\",\n              value: inputValue,\n              onChange: e => {\n                setInputValue(e.target.value);\n                handleInput();\n              },\n              onKeyDown: handleKeyDown,\n              onInput: handleInput,\n              placeholder: \"What are you gonna do?\",\n              rows: \"1\",\n              style: {\n                overflowY: 'auto',\n                lineHeight: '24px',\n                maxHeight: '200px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"submitButton\",\n              onClick: handleSubmit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Particles, {\n      style: {\n        zIndex: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n_s(Demo, \"/jsWN4TqMAvKJbUnmRk6DSQ5Z2I=\");\n_c = Demo;\nexport default Demo;\nvar _c;\n$RefreshReg$(_c, \"Demo\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Particles","jsxDEV","_jsxDEV","Demo","_s","messages","setMessages","inputValue","setInputValue","textareaRef","handleSubmit","trim","userMessage","text","type","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","stream","messagesArray","split","filter","Boolean","map","parse","forEach","messageChunk","responseMessage","initChat","data","json","welcomeMessage","renderMessageWithNewlines","line","index","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","handleKeyDown","e","key","shiftKey","preventDefault","handleInput","textarea","current","style","height","Math","min","scrollHeight","className","onSubmit","ref","onChange","target","onKeyDown","onInput","placeholder","rows","overflowY","lineHeight","maxHeight","onClick","zIndex","_c","$RefreshReg$"],"sources":["/home/pietro/Desktop/aidventure/frontend/src/pages/Demo.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport './Demo.scss';\nimport Particles from '../elements/Particles';\n\nfunction Demo() {\n    const [messages, setMessages] = useState([]); // State to store the messages\n    const [inputValue, setInputValue] = useState(''); // State to track textarea input\n    const textareaRef = useRef(null); // Ref to access the textarea\n\n    // Function to handle form submission\n    const handleSubmit = async () => {\n        if (inputValue.trim() !== '') {\n            const userMessage = { text: inputValue, type: 'user' };\n\n            // Append the user message to the bottom of the message list\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n            // Open the connection to stream the message\n            const response = await fetch('http://127.0.0.1:8000/send-message', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: inputValue }),\n            });\n\n            // Stream the response text in real-time\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n\n            // Process each chunk as it's received\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = decoder.decode(value, { stream: true });\n\n                // Parse and handle each line of the streamed response\n                const messagesArray = chunk.trim().split(\"\\n\").filter(Boolean).map(JSON.parse);\n\n                // Append each streamed chunk of the response to the message list\n                messagesArray.forEach((messageChunk) => {\n                    const responseMessage = { text: messageChunk.message, type: 'response' };\n                    setMessages((prevMessages) => [...prevMessages, responseMessage]);\n                });\n            }\n\n            setInputValue(''); // Clear textarea after submit\n        }\n    };\n\n    // Function to initialize the conversation by fetching the system's first message\n    const initChat = async () => {\n        const response = await fetch('http://127.0.0.1:8000/initChat', {\n            method: 'GET',\n        });\n\n        const data = await response.json();\n        const welcomeMessage = { text: data.message, type: 'response' };\n\n        // Set the initial welcome message\n        setMessages([welcomeMessage]);\n    };\n\n    // Utility function to convert newlines to <br /> tags\n    const renderMessageWithNewlines = (message) => {\n        return message.split('\\n').map((line, index) => (\n            <React.Fragment key={index}>\n                {line}\n                <br />\n            </React.Fragment>\n        ));\n    };\n\n    // Handle Enter (submit) and Shift+Enter (newline)\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            if (e.shiftKey) {\n                return;\n            } else {\n                e.preventDefault();\n                handleSubmit();\n            }\n        }\n    };\n\n    // Adjust the textarea height dynamically based on content\n    const handleInput = () => {\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = 'auto'; // Reset the height\n            textarea.style.height = `${Math.min(textarea.scrollHeight, 5 * 24)}px`; // Max height of 5 lines (assuming 24px line height)\n        }\n    };\n\n    // Send the initial storyteller message when component mounts\n    useEffect(() => {\n        initChat(); // Initialize the chat by calling the FastAPI `/initChat` route\n    }, []);\n\n    return (\n        <div className='topContainer'>\n            <div className=\"chatDisplay\">\n                <div className=\"chatContainer\">\n                    {/* Display the submitted messages */}\n                    <div className=\"messageList\">\n                        {messages.map((message, index) => (\n                            <div\n                                key={index}\n                                className={\n                                    message.type === 'user'\n                                        ? 'messageItemUser'\n                                        : 'messageItemResponse'\n                                }\n                            >\n                                {renderMessageWithNewlines(message.text)}\n                            </div>\n                        ))}\n                    </div>\n\n                    {/* Form for submitting messages */}\n                    <form className=\"chatForm\" onSubmit={(e) => e.preventDefault()}>\n                        <div className=\"inputWrapper\">\n                            <textarea\n                                ref={textareaRef}\n                                className=\"chatInput\"\n                                value={inputValue}\n                                onChange={(e) => {\n                                    setInputValue(e.target.value);\n                                    handleInput();\n                                }}\n                                onKeyDown={handleKeyDown}\n                                onInput={handleInput}\n                                placeholder=\"What are you gonna do?\"\n                                rows=\"1\"\n                                style={{ overflowY: 'auto', lineHeight: '24px', maxHeight: '200px' }}\n                            />\n                            <button type=\"button\" className=\"submitButton\" onClick={handleSubmit}>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <Particles style={{ zIndex: 0 }} />\n        </div>\n    );\n}\n\nexport default Demo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,aAAa;AACpB,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAMY,WAAW,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElC;EACA,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIH,UAAU,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1B,MAAMC,WAAW,GAAG;QAAEC,IAAI,EAAEN,UAAU;QAAEO,IAAI,EAAE;MAAO,CAAC;;MAEtD;MACAR,WAAW,CAAES,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,CAAC,CAAC;;MAE7D;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEhB;QAAW,CAAC;MAChD,CAAC,CAAC;;MAEF;MACA,MAAMiB,MAAM,GAAGR,QAAQ,CAACI,IAAI,CAACK,SAAS,CAAC,CAAC;MACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;;MAEjC;MACA,OAAO,IAAI,EAAE;QACT,MAAM;UAAEC,IAAI;UAAEC;QAAM,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;QAC3C,IAAIF,IAAI,EAAE;QACV,MAAMG,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACH,KAAK,EAAE;UAAEI,MAAM,EAAE;QAAK,CAAC,CAAC;;QAErD;QACA,MAAMC,aAAa,GAAGH,KAAK,CAACpB,IAAI,CAAC,CAAC,CAACwB,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACjB,IAAI,CAACkB,KAAK,CAAC;;QAE9E;QACAL,aAAa,CAACM,OAAO,CAAEC,YAAY,IAAK;UACpC,MAAMC,eAAe,GAAG;YAAE7B,IAAI,EAAE4B,YAAY,CAAClB,OAAO;YAAET,IAAI,EAAE;UAAW,CAAC;UACxER,WAAW,CAAES,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE2B,eAAe,CAAC,CAAC;QACrE,CAAC,CAAC;MACN;MAEAlC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAMmC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC3DC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,MAAM0B,IAAI,GAAG,MAAM5B,QAAQ,CAAC6B,IAAI,CAAC,CAAC;IAClC,MAAMC,cAAc,GAAG;MAAEjC,IAAI,EAAE+B,IAAI,CAACrB,OAAO;MAAET,IAAI,EAAE;IAAW,CAAC;;IAE/D;IACAR,WAAW,CAAC,CAACwC,cAAc,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAMC,yBAAyB,GAAIxB,OAAO,IAAK;IAC3C,OAAOA,OAAO,CAACY,KAAK,CAAC,IAAI,CAAC,CAACG,GAAG,CAAC,CAACU,IAAI,EAAEC,KAAK,kBACvC/C,OAAA,CAACN,KAAK,CAACsD,QAAQ;MAAAC,QAAA,GACVH,IAAI,eACL9C,OAAA;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA,GAFWN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACnB,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIC,CAAC,IAAK;IACzB,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MACnB,IAAID,CAAC,CAACE,QAAQ,EAAE;QACZ;MACJ,CAAC,MAAM;QACHF,CAAC,CAACG,cAAc,CAAC,CAAC;QAClBlD,YAAY,CAAC,CAAC;MAClB;IACJ;EACJ,CAAC;;EAED;EACA,MAAMmD,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,QAAQ,GAAGrD,WAAW,CAACsD,OAAO;IACpC,IAAID,QAAQ,EAAE;MACVA,QAAQ,CAACE,KAAK,CAACC,MAAM,GAAG,MAAM,CAAC,CAAC;MAChCH,QAAQ,CAACE,KAAK,CAACC,MAAM,GAAI,GAAEC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,YAAY,EAAE,CAAC,GAAG,EAAE,CAAE,IAAG,CAAC,CAAC;IAC5E;EACJ,CAAC;;EAED;EACArE,SAAS,CAAC,MAAM;IACZ4C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIzC,OAAA;IAAKmE,SAAS,EAAC,cAAc;IAAAlB,QAAA,gBACzBjD,OAAA;MAAKmE,SAAS,EAAC,aAAa;MAAAlB,QAAA,eACxBjD,OAAA;QAAKmE,SAAS,EAAC,eAAe;QAAAlB,QAAA,gBAE1BjD,OAAA;UAAKmE,SAAS,EAAC,aAAa;UAAAlB,QAAA,EACvB9C,QAAQ,CAACiC,GAAG,CAAC,CAACf,OAAO,EAAE0B,KAAK,kBACzB/C,OAAA;YAEImE,SAAS,EACL9C,OAAO,CAACT,IAAI,KAAK,MAAM,GACjB,iBAAiB,GACjB,qBACT;YAAAqC,QAAA,EAEAJ,yBAAyB,CAACxB,OAAO,CAACV,IAAI;UAAC,GAPnCoC,KAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQT,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAGNrD,OAAA;UAAMmE,SAAS,EAAC,UAAU;UAACC,QAAQ,EAAGb,CAAC,IAAKA,CAAC,CAACG,cAAc,CAAC,CAAE;UAAAT,QAAA,eAC3DjD,OAAA;YAAKmE,SAAS,EAAC,cAAc;YAAAlB,QAAA,gBACzBjD,OAAA;cACIqE,GAAG,EAAE9D,WAAY;cACjB4D,SAAS,EAAC,WAAW;cACrBxC,KAAK,EAAEtB,UAAW;cAClBiE,QAAQ,EAAGf,CAAC,IAAK;gBACbjD,aAAa,CAACiD,CAAC,CAACgB,MAAM,CAAC5C,KAAK,CAAC;gBAC7BgC,WAAW,CAAC,CAAC;cACjB,CAAE;cACFa,SAAS,EAAElB,aAAc;cACzBmB,OAAO,EAAEd,WAAY;cACrBe,WAAW,EAAC,wBAAwB;cACpCC,IAAI,EAAC,GAAG;cACRb,KAAK,EAAE;gBAAEc,SAAS,EAAE,MAAM;gBAAEC,UAAU,EAAE,MAAM;gBAAEC,SAAS,EAAE;cAAQ;YAAE;cAAA5B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxE,CAAC,eACFrD,OAAA;cAAQY,IAAI,EAAC,QAAQ;cAACuD,SAAS,EAAC,cAAc;cAACY,OAAO,EAAEvE;YAAa;cAAA0C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNrD,OAAA,CAACF,SAAS;MAACgE,KAAK,EAAE;QAAEkB,MAAM,EAAE;MAAE;IAAE;MAAA9B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEd;AAACnD,EAAA,CA7IQD,IAAI;AAAAgF,EAAA,GAAJhF,IAAI;AA+Ib,eAAeA,IAAI;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}